{"version":3,"file":"facebook.d.ts","sources":["facebook.d.ts"],"names":[],"mappingssourcesContent":["import { AuthResponse } from '../models/auth-response';\nimport { InitParams } from '../models/init-params';\nimport { LoginOptions } from '../models/login-options';\nimport { LoginResponse } from '../models/login-response';\nimport { LoginStatus } from '../models/login-status';\nimport { UIParams } from '../models/ui-params';\nimport { UIResponse } from '../models/ui-response';\n/**\n * @hidden\n */\nexport declare type ApiMethod = 'get' | 'post' | 'delete';\n/**\n * @shortdesc\n * Angular 2 service to inject to use Facebook's SDK\n * @description\n * You only need to inject this service in your application if you aren't using [`FacebookModule`](../facebook-module).\n * @usage\n * ```typescript\n * import { FacebookService, InitParams } from 'ngx-facebook-sdk';\n *\n * constructor(private fb: FacebookService) {\n *\n *   const params: InitParams = {\n *\n *   };\n *\n *   fb.init(params);\n *\n * }\n * ```\n */\nexport declare class FacebookService {\n    /**\n     * This method is used to initialize and setup the SDK.\n     * @param params {InitParams} Initialization parameters\n     * @returns {Promise<any>}\n     */\n    init(params: InitParams): Promise<any>;\n    /**\n     * This method lets you make calls to the Graph API\n     * @usage\n     * ```typescript\n     * this.fb.api('somepath')\n     *   .then(res => console.log(res))\n     *   .catch(e => console.log(e));\n     * ```\n     * @param path {string} The Graph API endpoint path that you want to call.\n     * @param [method=get] {string} The HTTP method that you want to use for the API request.\n     * @param [params] {Object} An object consisting of any parameters that you want to pass into your Graph API call.\n     * @returns {Promise<any>}\n     */\n    api(path: string, method?: ApiMethod, params?: any): Promise<any>;\n    /**\n     * This method is used to trigger different forms of Facebook created UI dialogs.\n     * These dialogs include:\n     * - Share dialog\n     * - Login dialog\n     * - Add page tab dialog\n     * - Requests dialog\n     * - Send dialog\n     * - Payments dialog\n     * - Go Live dialog\n     * @param params {UIParams} A collection of parameters that control which dialog is loaded, and relevant settings.\n     * @returns {Promise<UIResponse>}\n     */\n    ui(params: UIParams): Promise<UIResponse>;\n    /**\n     * This method allows you to determine if a user is logged in to Facebook and has authenticated your app.\n     * @param [forceFreshResponse=false] {boolean} Force a fresh response.\n     * @returns {Promise<LoginStatus>}\n     */\n    getLoginStatus(forceFreshResponse?: boolean): Promise<LoginStatus>;\n    /**\n     * Login the user\n     * @usage\n     * ```typescript\n     * // login without options\n     * this.fb.login()\n     *   .then((response: LoginResponse) => console.log('Logged in', response))\n     *   .catch(e => console.error('Error logging in'));\n     *\n     * // login with options\n     * const options: LoginOptions = {\n     *   scope: 'public_profile,user_friends,email,pages_show_list',\n     *   return_scopes: true,\n     *   enable_profile_selector: true\n     * };\n     * this.fb.login(options)\n     *   .then(...)\n     *   .catch(...);\n     * ```\n     * @param [options] {LoginOptions} Login options\n     * @returns {Promise<LoginResponse>} returns a promise that resolves with [LoginResponse](../login-response) object, or rejects with an error\n     */\n    login(options?: LoginOptions): Promise<LoginResponse>;\n    /**\n     * Logout the user\n     * @usage\n     * ```typescript\n     * this.fb.logout().then(() => console.log('Logged out!'));\n     * ```\n     * @returns {Promise<any>} returns a promise that resolves when the user is logged out\n     */\n    logout(): Promise<any>;\n    /**\n     * This synchronous function returns back the current authResponse.\n     * @usage\n     * ```typescript\n     * import { AuthResponse, FacebookService } from 'ngx-facebook-sdk';\n     *\n     * ...\n     *\n     * const authResponse: AuthResponse = this.fb.getAuthResponse();\n     * ```\n     * @returns {AuthResponse} returns an [AuthResponse](../auth-response) object\n     */\n    getAuthResponse(): AuthResponse;\n}\n"]}