import { ChangeDetectorRef, Component, ElementRef, Input, ChangeDetectionStrategy } from '@angular/core';
import Swiper from 'swiper';
export class SwiperComponent {
    constructor(elementRef, changeDetectorRef) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.slideCount = 0;
        this.initialized = false;
        this.shouldInitialize = true;
    }
    set initialize(value) {
        this.shouldInitialize = this.initialized ? false : value;
    }
    ngAfterViewInit() {
        if (this.shouldInitialize) {
            this.setup();
        }
    }
    setup() {
        if (!this.swiper) {
            // if rendered on server querySelector is undefined
            if (this.elementRef.nativeElement.querySelector) {
                this.swiperWrapper = this.elementRef.nativeElement.querySelector('.swiper-wrapper');
                this.slideCount = this.swiperWrapper.childElementCount;
                this.swiper = new Swiper(this.elementRef.nativeElement.querySelector('swiper > div'), this.config);
                this.changeDetectorRef.detectChanges();
            }
            this.shouldInitialize = false;
        }
    }
    ngAfterViewChecked() {
        if (this.shouldInitialize) {
            this.setup();
        }
        if (this.swiperWrapper &&
            this.slideCount !== this.swiperWrapper.childElementCount) {
            this.slideCount = this.swiperWrapper.childElementCount;
            this.swiper.update();
        }
    }
    ngOnDestroy() {
        this.swiper.destroy(true, true);
    }
}
SwiperComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: 'swiper',
                template: "<div\r\n  [ngClass]=\"{\r\n    'swiper-container': config?.containerModifierClass === undefined\r\n  }\"\r\n>\r\n  <ng-content></ng-content>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:block}.swiper-container{height:100%;width:100%}"]
            },] }
];
SwiperComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
SwiperComponent.propDecorators = {
    config: [{ type: Input }],
    initialize: [{ type: Input, args: ['initialize',] }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC11c2VmdWwtc3dpcGVyL3NyYy9saWIvc3dpcGVyL3N3aXBlci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdMLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLEtBQUssRUFFTCx1QkFBdUIsRUFDeEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxNQUF5QixNQUFNLFFBQVEsQ0FBQztBQVMvQyxNQUFNLE9BQU8sZUFBZTtJQWMxQixZQUNVLFVBQXNCLEVBQ3RCLGlCQUFvQztRQURwQyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFOdEMsZUFBVSxHQUFHLENBQUMsQ0FBQztRQUNmLGdCQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLHFCQUFnQixHQUFHLElBQUksQ0FBQztJQUs3QixDQUFDO0lBZEosSUFBeUIsVUFBVSxDQUFDLEtBQWM7UUFDaEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzNELENBQUM7SUFjRCxlQUFlO1FBQ2IsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7SUFDSCxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2hCLG1EQUFtRDtZQUNuRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRTtnQkFDL0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQzlELGlCQUFpQixDQUNsQixDQUFDO2dCQUNGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQztnQkFDdkQsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FDdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLGNBQWMsQ0FBQyxFQUMzRCxJQUFJLENBQUMsTUFBTSxDQUNaLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxDQUFDO2FBQ3hDO1lBRUQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDekIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQ2Q7UUFFRCxJQUNFLElBQUksQ0FBQyxhQUFhO1lBQ2xCLElBQUksQ0FBQyxVQUFVLEtBQUssSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsRUFDeEQ7WUFDQSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUM7WUFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN0QjtJQUNILENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7OztZQW5FRixTQUFTLFNBQUM7Z0JBQ1QsK0NBQStDO2dCQUMvQyxRQUFRLEVBQUUsUUFBUTtnQkFDbEIsc0tBQXNDO2dCQUV0QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7YUFDaEQ7OztZQWJDLFVBQVU7WUFGVixpQkFBaUI7OztxQkFrQmhCLEtBQUs7eUJBQ0wsS0FBSyxTQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIEFmdGVyVmlld0NoZWNrZWQsXHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBDaGFuZ2VEZXRlY3RvclJlZixcclxuICBDb21wb25lbnQsXHJcbiAgRWxlbWVudFJlZixcclxuICBJbnB1dCxcclxuICBPbkRlc3Ryb3ksXHJcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3lcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IFN3aXBlciwgeyBTd2lwZXJPcHRpb25zIH0gZnJvbSAnc3dpcGVyJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogY29tcG9uZW50LXNlbGVjdG9yXHJcbiAgc2VsZWN0b3I6ICdzd2lwZXInLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9zd2lwZXIuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL3N3aXBlci5jb21wb25lbnQuY3NzJ10sXHJcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcclxufSlcclxuZXhwb3J0IGNsYXNzIFN3aXBlckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgLy8gYWRkIGFsbCB0aGUgb3B0aW9ucyBhcyBvcHRpb25hbCBzZXR0aW5ncyBhbmQgdXNlIHRoZW0gdG8gY3JlYXRlIGFuIG9wdGlvbnMgb2JqZWN0XHJcbiAgQElucHV0KCkgY29uZmlnOiBTd2lwZXJPcHRpb25zO1xyXG4gIEBJbnB1dCgnaW5pdGlhbGl6ZScpIHNldCBpbml0aWFsaXplKHZhbHVlOiBib29sZWFuKSB7XHJcbiAgICB0aGlzLnNob3VsZEluaXRpYWxpemUgPSB0aGlzLmluaXRpYWxpemVkID8gZmFsc2UgOiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHN3aXBlcjogU3dpcGVyO1xyXG5cclxuICBwcml2YXRlIHN3aXBlcldyYXBwZXI6IGFueTtcclxuICBwcml2YXRlIHNsaWRlQ291bnQgPSAwO1xyXG4gIHByaXZhdGUgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuICBwcml2YXRlIHNob3VsZEluaXRpYWxpemUgPSB0cnVlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZWxlbWVudFJlZjogRWxlbWVudFJlZixcclxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3JSZWY6IENoYW5nZURldGVjdG9yUmVmXHJcbiAgKSB7fVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICBpZiAodGhpcy5zaG91bGRJbml0aWFsaXplKSB7XHJcbiAgICAgIHRoaXMuc2V0dXAoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldHVwKCkge1xyXG4gICAgaWYgKCF0aGlzLnN3aXBlcikge1xyXG4gICAgICAvLyBpZiByZW5kZXJlZCBvbiBzZXJ2ZXIgcXVlcnlTZWxlY3RvciBpcyB1bmRlZmluZWRcclxuICAgICAgaWYgKHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IpIHtcclxuICAgICAgICB0aGlzLnN3aXBlcldyYXBwZXIgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgJy5zd2lwZXItd3JhcHBlcidcclxuICAgICAgICApO1xyXG4gICAgICAgIHRoaXMuc2xpZGVDb3VudCA9IHRoaXMuc3dpcGVyV3JhcHBlci5jaGlsZEVsZW1lbnRDb3VudDtcclxuICAgICAgICB0aGlzLnN3aXBlciA9IG5ldyBTd2lwZXIoXHJcbiAgICAgICAgICB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdzd2lwZXIgPiBkaXYnKSxcclxuICAgICAgICAgIHRoaXMuY29uZmlnXHJcbiAgICAgICAgKTtcclxuICAgICAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5zaG91bGRJbml0aWFsaXplID0gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XHJcbiAgICBpZiAodGhpcy5zaG91bGRJbml0aWFsaXplKSB7XHJcbiAgICAgIHRoaXMuc2V0dXAoKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuc3dpcGVyV3JhcHBlciAmJlxyXG4gICAgICB0aGlzLnNsaWRlQ291bnQgIT09IHRoaXMuc3dpcGVyV3JhcHBlci5jaGlsZEVsZW1lbnRDb3VudFxyXG4gICAgKSB7XHJcbiAgICAgIHRoaXMuc2xpZGVDb3VudCA9IHRoaXMuc3dpcGVyV3JhcHBlci5jaGlsZEVsZW1lbnRDb3VudDtcclxuICAgICAgdGhpcy5zd2lwZXIudXBkYXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIHRoaXMuc3dpcGVyLmRlc3Ryb3kodHJ1ZSwgdHJ1ZSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==